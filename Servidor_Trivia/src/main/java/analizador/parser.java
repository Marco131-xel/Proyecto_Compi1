
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import excepciones.Errores;
import datos.Usuario;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\004\003\000\002\004\004\000\002\005\005" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\006\014\000\002\007\006\000\002\010\006" +
    "\000\002\011\006\000\002\012\025\000\002\013\005\000" +
    "\002\013\007\000\002\014\041\000\002\015\025\000\002" +
    "\016\031\000\002\017\005\000\002\017\007\000\002\022" +
    "\021\000\002\021\005\000\002\021\007\000\002\020\025" +
    "\000\002\023\035\000\002\024\041\000\002\025\005\000" +
    "\002\025\007\000\002\026\025\000\002\027\025\000\002" +
    "\030\035\000\002\031\061\000\002\032\005\000\002\032" +
    "\007\000\002\033\025\000\002\034\071\000\002\035\005" +
    "\000\002\035\007\000\002\036\025\000\002\037\045" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ba\000\004\004\010\001\002\000\004\004\026\001" +
    "\002\000\006\002\ufff4\004\ufff4\001\002\000\006\002\ufffe" +
    "\004\ufffe\001\002\000\006\002\ufff5\004\ufff5\001\002\000" +
    "\006\006\027\007\u01b4\001\002\000\006\002\ufffa\004\ufffa" +
    "\001\002\000\004\002\u01b3\001\002\000\006\002\ufff3\004" +
    "\ufff3\001\002\000\004\002\uffff\001\002\000\006\002\ufff8" +
    "\004\ufff8\001\002\000\004\004\040\001\002\000\006\002" +
    "\000\004\026\001\002\000\006\002\ufff7\004\ufff7\001\002" +
    "\000\006\002\ufff6\004\ufff6\001\002\000\006\002\ufffb\004" +
    "\ufffb\001\002\000\006\002\ufff9\004\ufff9\001\002\000\006" +
    "\002\ufff2\004\ufff2\001\002\000\006\002\ufffd\004\ufffd\001" +
    "\002\000\004\006\027\001\002\000\004\010\030\001\002" +
    "\000\004\011\031\001\002\000\004\012\032\001\002\000" +
    "\004\021\033\001\002\000\004\063\034\001\002\000\004" +
    "\021\035\001\002\000\004\006\036\001\002\000\004\005" +
    "\037\001\002\000\004\004\ufff1\001\002\000\004\007\041" +
    "\001\002\000\004\024\042\001\002\000\004\013\043\001" +
    "\002\000\004\021\044\001\002\000\026\026\047\030\052" +
    "\037\056\040\051\041\053\043\046\044\050\050\055\052" +
    "\054\053\045\001\002\000\004\021\u016b\001\002\000\004" +
    "\021\u0157\001\002\000\004\021\u0127\001\002\000\004\021" +
    "\u011b\001\002\000\004\021\373\001\002\000\004\021\323" +
    "\001\002\000\004\021\243\001\002\000\004\021\207\001" +
    "\002\000\004\021\107\001\002\000\004\021\057\001\002" +
    "\000\004\005\060\001\002\000\004\014\061\001\002\000" +
    "\004\021\062\001\002\000\004\027\063\001\002\000\004" +
    "\021\064\001\002\000\004\013\065\001\002\000\004\016" +
    "\066\001\002\000\004\014\067\001\002\000\004\021\070" +
    "\001\002\000\004\031\071\001\002\000\004\021\072\001" +
    "\002\000\004\013\073\001\002\000\004\021\074\001\002" +
    "\000\004\065\075\001\002\000\004\021\076\001\002\000" +
    "\004\015\077\001\002\000\004\017\100\001\002\000\004" +
    "\015\101\001\002\000\004\004\103\001\002\000\006\002" +
    "\uffe1\004\uffe1\001\002\000\004\025\104\001\002\000\004" +
    "\007\105\001\002\000\004\005\106\001\002\000\006\002" +
    "\uffef\004\uffef\001\002\000\004\005\110\001\002\000\004" +
    "\014\111\001\002\000\004\021\112\001\002\000\004\051" +
    "\113\001\002\000\004\021\114\001\002\000\004\013\115" +
    "\001\002\000\004\016\116\001\002\000\004\014\117\001" +
    "\002\000\004\021\124\001\002\000\004\017\121\001\002" +
    "\000\004\015\122\001\002\000\004\004\103\001\002\000" +
    "\006\002\uffd7\004\uffd7\001\002\000\004\054\131\001\002" +
    "\000\004\015\126\001\002\000\006\017\uffd9\020\127\001" +
    "\002\000\004\014\117\001\002\000\004\017\uffd8\001\002" +
    "\000\004\021\132\001\002\000\004\013\133\001\002\000" +
    "\004\021\134\001\002\000\004\064\135\001\002\000\004" +
    "\021\136\001\002\000\004\020\137\001\002\000\004\021" +
    "\140\001\002\000\004\055\141\001\002\000\004\021\142" +
    "\001\002\000\004\013\143\001\002\000\004\021\144\001" +
    "\002\000\004\064\145\001\002\000\004\021\146\001\002" +
    "\000\004\020\147\001\002\000\004\021\150\001\002\000" +
    "\004\060\151\001\002\000\004\021\152\001\002\000\004" +
    "\013\153\001\002\000\004\021\154\001\002\000\004\065" +
    "\155\001\002\000\004\021\156\001\002\000\004\020\157" +
    "\001\002\000\004\021\160\001\002\000\004\056\161\001" +
    "\002\000\004\021\162\001\002\000\004\013\163\001\002" +
    "\000\004\021\164\001\002\000\004\065\165\001\002\000" +
    "\004\021\166\001\002\000\004\020\167\001\002\000\004" +
    "\021\170\001\002\000\004\057\171\001\002\000\004\021" +
    "\172\001\002\000\004\013\173\001\002\000\004\021\174" +
    "\001\002\000\004\065\175\001\002\000\004\021\176\001" +
    "\002\000\004\020\177\001\002\000\004\021\200\001\002" +
    "\000\004\061\201\001\002\000\004\021\202\001\002\000" +
    "\004\013\203\001\002\000\004\021\204\001\002\000\004" +
    "\065\205\001\002\000\004\021\206\001\002\000\004\015" +
    "\uffda\001\002\000\004\005\210\001\002\000\004\014\211" +
    "\001\002\000\004\021\212\001\002\000\004\051\213\001" +
    "\002\000\004\021\214\001\002\000\004\013\215\001\002" +
    "\000\004\016\216\001\002\000\004\014\217\001\002\000" +
    "\004\021\220\001\002\000\004\064\221\001\002\000\004" +
    "\021\222\001\002\000\004\013\223\001\002\000\004\021" +
    "\224\001\002\000\004\054\225\001\002\000\004\021\226" +
    "\001\002\000\004\020\227\001\002\000\004\021\230\001" +
    "\002\000\004\055\231\001\002\000\004\021\232\001\002" +
    "\000\004\013\233\001\002\000\004\021\234\001\002\000" +
    "\004\054\235\001\002\000\004\021\236\001\002\000\004" +
    "\015\237\001\002\000\004\017\240\001\002\000\004\015" +
    "\241\001\002\000\004\004\103\001\002\000\006\002\uffd2" +
    "\004\uffd2\001\002\000\004\005\244\001\002\000\004\014" +
    "\245\001\002\000\004\021\246\001\002\000\004\042\247" +
    "\001\002\000\004\021\250\001\002\000\004\013\251\001" +
    "\002\000\004\016\252\001\002\000\004\014\254\001\002" +
    "\000\004\017\320\001\002\000\004\021\255\001\002\000" +
    "\004\045\262\001\002\000\004\015\257\001\002\000\006" +
    "\017\uffdf\020\260\001\002\000\004\014\254\001\002\000" +
    "\004\017\uffde\001\002\000\004\021\263\001\002\000\004" +
    "\013\264\001\002\000\004\021\265\001\002\000\004\064" +
    "\266\001\002\000\004\021\267\001\002\000\004\020\270" +
    "\001\002\000\004\021\271\001\002\000\004\046\272\001" +
    "\002\000\004\021\273\001\002\000\004\013\274\001\002" +
    "\000\004\021\275\001\002\000\004\065\276\001\002\000" +
    "\004\021\277\001\002\000\004\020\300\001\002\000\004" +
    "\021\301\001\002\000\004\033\302\001\002\000\004\021" +
    "\303\001\002\000\004\013\304\001\002\000\004\021\305" +
    "\001\002\000\004\065\306\001\002\000\004\021\307\001" +
    "\002\000\004\020\310\001\002\000\004\021\311\001\002" +
    "\000\004\047\312\001\002\000\004\021\313\001\002\000" +
    "\004\013\314\001\002\000\004\021\315\001\002\000\004" +
    "\065\316\001\002\000\004\021\317\001\002\000\004\015" +
    "\uffe0\001\002\000\004\015\321\001\002\000\004\004\103" +
    "\001\002\000\006\002\uffdd\004\uffdd\001\002\000\004\005" +
    "\324\001\002\000\004\014\325\001\002\000\004\021\326" +
    "\001\002\000\004\027\327\001\002\000\004\021\330\001" +
    "\002\000\004\013\331\001\002\000\004\016\332\001\002" +
    "\000\004\014\334\001\002\000\004\017\370\001\002\000" +
    "\004\021\335\001\002\000\004\035\342\001\002\000\004" +
    "\015\337\001\002\000\006\017\uffe7\020\340\001\002\000" +
    "\004\014\334\001\002\000\004\017\uffe6\001\002\000\004" +
    "\021\343\001\002\000\004\013\344\001\002\000\004\021" +
    "\345\001\002\000\004\065\346\001\002\000\004\021\347" +
    "\001\002\000\004\020\350\001\002\000\004\021\351\001" +
    "\002\000\004\026\352\001\002\000\004\021\353\001\002" +
    "\000\004\013\354\001\002\000\004\021\355\001\002\000" +
    "\004\065\356\001\002\000\004\021\357\001\002\000\004" +
    "\020\360\001\002\000\004\021\361\001\002\000\004\036" +
    "\362\001\002\000\004\021\363\001\002\000\004\013\364" +
    "\001\002\000\004\021\365\001\002\000\004\065\366\001" +
    "\002\000\004\021\367\001\002\000\004\015\uffe8\001\002" +
    "\000\004\015\371\001\002\000\004\004\103\001\002\000" +
    "\006\002\uffe9\004\uffe9\001\002\000\004\005\374\001\002" +
    "\000\004\014\375\001\002\000\004\021\376\001\002\000" +
    "\004\027\377\001\002\000\004\021\u0100\001\002\000\004" +
    "\013\u0101\001\002\000\004\016\u0102\001\002\000\004\014" +
    "\u0103\001\002\000\004\021\u0108\001\002\000\004\017\u0105" +
    "\001\002\000\004\015\u0106\001\002\000\004\004\103\001" +
    "\002\000\006\002\uffe2\004\uffe2\001\002\000\004\031\u010d" +
    "\001\002\000\004\015\u010a\001\002\000\006\017\uffe4\020" +
    "\u010b\001\002\000\004\014\u0103\001\002\000\004\017\uffe3" +
    "\001\002\000\004\021\u010e\001\002\000\004\013\u010f\001" +
    "\002\000\004\021\u0110\001\002\000\004\065\u0111\001\002" +
    "\000\004\021\u0112\001\002\000\004\020\u0113\001\002\000" +
    "\004\021\u0114\001\002\000\004\032\u0115\001\002\000\004" +
    "\021\u0116\001\002\000\004\013\u0117\001\002\000\004\021" +
    "\u0118\001\002\000\004\065\u0119\001\002\000\004\021\u011a" +
    "\001\002\000\004\015\uffe5\001\002\000\004\005\u011c\001" +
    "\002\000\004\014\u011d\001\002\000\004\021\u011e\001\002" +
    "\000\004\042\u011f\001\002\000\004\021\u0120\001\002\000" +
    "\004\013\u0121\001\002\000\004\016\u0122\001\002\000\004" +
    "\014\254\001\002\000\004\017\u0124\001\002\000\004\015" +
    "\u0125\001\002\000\004\004\103\001\002\000\006\002\uffdc" +
    "\004\uffdc\001\002\000\004\005\u0128\001\002\000\004\014" +
    "\u0129\001\002\000\004\021\u012a\001\002\000\004\027\u012b" +
    "\001\002\000\004\021\u012c\001\002\000\004\013\u012d\001" +
    "\002\000\004\016\u012e\001\002\000\004\014\u012f\001\002" +
    "\000\004\021\u0134\001\002\000\004\017\u0131\001\002\000" +
    "\004\015\u0132\001\002\000\004\004\103\001\002\000\006" +
    "\002\uffed\004\uffed\001\002\000\004\031\u0139\001\002\000" +
    "\004\015\u0136\001\002\000\006\017\uffec\020\u0137\001\002" +
    "\000\004\014\u012f\001\002\000\004\017\uffeb\001\002\000" +
    "\004\021\u013a\001\002\000\004\013\u013b\001\002\000\004" +
    "\021\u013c\001\002\000\004\065\u013d\001\002\000\004\021" +
    "\u013e\001\002\000\004\020\u013f\001\002\000\004\021\u0140" +
    "\001\002\000\004\032\u0141\001\002\000\004\021\u0142\001" +
    "\002\000\004\013\u0143\001\002\000\004\021\u0144\001\002" +
    "\000\004\065\u0145\001\002\000\004\021\u0146\001\002\000" +
    "\004\020\u0147\001\002\000\004\021\u0148\001\002\000\004" +
    "\033\u0149\001\002\000\004\021\u014a\001\002\000\004\013" +
    "\u014b\001\002\000\004\021\u014c\001\002\000\004\065\u014d" +
    "\001\002\000\004\021\u014e\001\002\000\004\020\u014f\001" +
    "\002\000\004\021\u0150\001\002\000\004\034\u0151\001\002" +
    "\000\004\021\u0152\001\002\000\004\013\u0153\001\002\000" +
    "\004\021\u0154\001\002\000\004\065\u0155\001\002\000\004" +
    "\021\u0156\001\002\000\004\015\uffea\001\002\000\004\005" +
    "\u0158\001\002\000\004\014\u0159\001\002\000\004\021\u015a" +
    "\001\002\000\004\042\u015b\001\002\000\004\021\u015c\001" +
    "\002\000\004\013\u015d\001\002\000\004\016\u015e\001\002" +
    "\000\004\014\u015f\001\002\000\004\021\u0160\001\002\000" +
    "\004\045\u0161\001\002\000\004\021\u0162\001\002\000\004" +
    "\013\u0163\001\002\000\004\021\u0164\001\002\000\004\054" +
    "\u0165\001\002\000\004\021\u0166\001\002\000\004\015\u0167" +
    "\001\002\000\004\017\u0168\001\002\000\004\015\u0169\001" +
    "\002\000\004\004\103\001\002\000\006\002\uffdb\004\uffdb" +
    "\001\002\000\004\005\u016c\001\002\000\004\014\u016d\001" +
    "\002\000\004\021\u016e\001\002\000\004\051\u016f\001\002" +
    "\000\004\021\u0170\001\002\000\004\013\u0171\001\002\000" +
    "\004\016\u0172\001\002\000\004\014\u0173\001\002\000\004" +
    "\021\u0178\001\002\000\004\017\u0175\001\002\000\004\015" +
    "\u0176\001\002\000\004\004\103\001\002\000\006\002\uffd3" +
    "\004\uffd3\001\002\000\004\054\u017d\001\002\000\004\015" +
    "\u017a\001\002\000\006\017\uffd5\020\u017b\001\002\000\004" +
    "\014\u0173\001\002\000\004\017\uffd4\001\002\000\004\021" +
    "\u017e\001\002\000\004\013\u017f\001\002\000\004\021\u0180" +
    "\001\002\000\004\064\u0181\001\002\000\004\021\u0182\001" +
    "\002\000\004\020\u0183\001\002\000\004\021\u0184\001\002" +
    "\000\004\055\u0185\001\002\000\004\021\u0186\001\002\000" +
    "\004\013\u0187\001\002\000\004\021\u0188\001\002\000\004" +
    "\064\u0189\001\002\000\004\021\u018a\001\002\000\004\020" +
    "\u018b\001\002\000\004\021\u018c\001\002\000\004\056\u018d" +
    "\001\002\000\004\021\u018e\001\002\000\004\013\u018f\001" +
    "\002\000\004\021\u0190\001\002\000\004\065\u0191\001\002" +
    "\000\004\021\u0192\001\002\000\004\020\u0193\001\002\000" +
    "\004\021\u0194\001\002\000\004\062\u0195\001\002\000\004" +
    "\021\u0196\001\002\000\004\013\u0197\001\002\000\004\021" +
    "\u0198\001\002\000\004\065\u0199\001\002\000\004\021\u019a" +
    "\001\002\000\004\020\u019b\001\002\000\004\021\u019c\001" +
    "\002\000\004\057\u019d\001\002\000\004\021\u019e\001\002" +
    "\000\004\013\u019f\001\002\000\004\021\u01a0\001\002\000" +
    "\004\065\u01a1\001\002\000\004\021\u01a2\001\002\000\004" +
    "\020\u01a3\001\002\000\004\021\u01a4\001\002\000\004\061" +
    "\u01a5\001\002\000\004\021\u01a6\001\002\000\004\013\u01a7" +
    "\001\002\000\004\021\u01a8\001\002\000\004\065\u01a9\001" +
    "\002\000\004\021\u01aa\001\002\000\004\020\u01ab\001\002" +
    "\000\004\021\u01ac\001\002\000\004\060\u01ad\001\002\000" +
    "\004\021\u01ae\001\002\000\004\013\u01af\001\002\000\004" +
    "\021\u01b0\001\002\000\004\065\u01b1\001\002\000\004\021" +
    "\u01b2\001\002\000\004\015\uffd6\001\002\000\004\002\001" +
    "\001\002\000\004\022\u01b5\001\002\000\004\005\u01b6\001" +
    "\002\000\004\004\ufff0\001\002\000\004\004\u01b8\001\002" +
    "\000\006\006\027\023\u01ba\001\002\000\004\002\ufffc\001" +
    "\002\000\004\007\u01bb\001\002\000\004\005\u01bc\001\002" +
    "\000\004\002\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ba\000\042\002\011\003\005\004\016\005\013\006" +
    "\015\007\003\012\021\015\010\020\022\023\014\026\017" +
    "\027\020\030\006\033\004\036\012\037\023\001\001\000" +
    "\034\003\005\004\u01b6\006\015\012\021\015\010\020\022" +
    "\023\014\026\017\027\020\030\006\033\004\036\012\037" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\024\006\015\012\021\015" +
    "\010\020\022\023\014\026\017\027\020\030\006\033\004" +
    "\036\012\037\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\117" +
    "\001\001\000\004\031\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\241\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\252\001\001\000\002\001\001\000\004\024\255\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\332\001\001\000\002\001\001\000" +
    "\004\016\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\340\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\371\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\u0103\001\001\000\004\022\u0108\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\u0106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\u010b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u0122\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\u0125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u012f\001\001" +
    "\000\004\014\u0134\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\u0132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u0137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\u0169\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\u0173\001\001\000\004\034\u0178" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\u0176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\u017b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\024\006\015\011\u01b8\012\021\015\010" +
    "\020\022\023\014\026\017\027\020\030\006\033\004\036" +
    "\012\037\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}

    // Lista de usuarios
    public LinkedList<Usuario> usuarios = new LinkedList<>();
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    String usuarioAntiguo;
    String usuarioNuevo;
    String nuevoPassword;
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public LinkedList<Usuario> getUsuarios(){
        return usuarios;
    }

    public LinkedList<Errores> getListaErrores() {
    return listaErrores;
    }

    public String getUsuarioAntiguo() {
        return usuarioAntiguo;
    }

    public String getUsuarioNuevo(){
        return usuarioNuevo;
    }

    public String getNuevoPassword(){
        return nuevoPassword;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= MULTIPLES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MULTIPLES ::= VARIAS INSTRUCCIONES FINISH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MULTIPLES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= USERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ACCES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= DELETE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= FORMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= MOD_FORMS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= DELETRIV 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= FORMS_AGRE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= FORMS_MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= DELECOMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CABECERA ::= MENOR INTER XSON VERSION IGUAL COMID DECIMAL COMID INTER MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CABECERA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIAS ::= MENOR EXCLA RESOS MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIAS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FIN ::= MENOR FINSO EXCLA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FIN",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FINISH ::= MENOR FINSOS EXCLA MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FINISH",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // USERS ::= CABECERA MENOR EXCLA RESO DOSPTS COMID USENU COMID MAYOR LLAVESA COMID DATUSE COMID DOSPTS CORCHEA LISTA_USUARIOS CORCHEC LLAVESC FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USERS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_USUARIOS ::= LLAVESA USUARIO_DATOS LLAVESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_USUARIOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_USUARIOS ::= LLAVESA USUARIO_DATOS LLAVESC COMA LISTA_USUARIOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_USUARIOS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // USUARIO_DATOS ::= COMID USUARIO COMID DOSPTS COMID VALOR COMID COMA COMID PASSWORD COMID DOSPTS COMID VALOR COMID COMA COMID NOMBRE COMID DOSPTS COMID VALOR COMID COMA COMID INSTITUCION COMID DOSPTS COMID VALOR COMID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                String usuario = a;
                String password = b;
                String nombre = c;
                String institucion = d;
                
                Usuario users = new Usuario(usuario, password, nombre, institucion);   
                usuarios.add(users);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIO_DATOS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-30)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MOD ::= CABECERA MENOR EXCLA RESO DOSPTS COMID MODUSE COMID MAYOR LLAVESA COMID DATUSE COMID DOSPTS CORCHEA LISTA_MOD CORCHEC LLAVESC FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOD",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MOD_DATOS ::= COMID USEAN COMID DOSPTS COMID VALOR COMID COMA COMID USENU COMID DOSPTS COMID VALOR COMID COMA COMID NUVPASS COMID DOSPTS COMID VALOR COMID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                usuarioAntiguo = a;
                usuarioNuevo = b;
                nuevoPassword = c;

            for (int i = 0; i < usuarios.size(); i++) {
                Usuario user = usuarios.get(i);
                if (user.getUsuario().equals(usuarioAntiguo)) {
                // Verificar si el nuevo usuario ya existe
                if (usuarios.stream().anyMatch(u -> u.getUsuario().equals(usuarioNuevo) && !u.getUsuario().equals(usuarioAntiguo))) {
                // Manejar el caso donde el nuevo usuario ya existe
                listaErrores.add(new Errores("Error de duplicado", "El usuario '" + usuarioNuevo + "' ya existe.", 0, 0));
                break;
                }
                // Actualizar los atributos del usuario
                user.setUsuario(usuarioNuevo);
                user.setPassword(nuevoPassword);
                break; 
                }
            } 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOD_DATOS",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-22)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_MOD ::= LLAVESA MOD_DATOS LLAVESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_MOD",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_MOD ::= LLAVESA MOD_DATOS LLAVESC COMA LISTA_MOD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_MOD",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LOGIN_DATOS ::= COMID USUARIO COMID DOSPTS COMID VALOR COMID COMA COMID PASSWORD COMID DOSPTS COMID VALOR COMID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LOGIN_DATOS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_LOGIN ::= LLAVESA LOGIN_DATOS LLAVESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LOGIN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_LOGIN ::= LLAVESA LOGIN_DATOS LLAVESC COMA LISTA_LOGIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_LOGIN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ACCES ::= CABECERA MENOR EXCLA RESO DOSPTS COMID LOGIN COMID MAYOR LLAVESA COMID DATUSE COMID DOSPTS CORCHEA LISTA_LOGIN CORCHEC LLAVESC FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DELETE ::= CABECERA MENOR EXCLA RESO DOSPTS COMID ELIUSE COMID MAYOR LLAVESA COMID DATUSE COMID DOSPTS CORCHEA LLAVESA COMID USUARIO COMID DOSPTS COMID VALOR COMID LLAVESC CORCHEC LLAVESC FIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
            usuarioAntiguo = a;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DELETE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TRIVIAS_DATOS ::= COMID IDTRIV COMID DOSPTS COMID ID COMID COMA COMID TIEMPO COMID DOSPTS COMID VALOR COMID COMA COMID NOMBRE COMID DOSPTS COMID VALOR COMID COMA COMID TEMA COMID DOSPTS COMID VALOR COMID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRIVIAS_DATOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-30)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_TRIVIAS ::= LLAVESA TRIVIAS_DATOS LLAVESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_TRIVIAS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_TRIVIAS ::= LLAVESA TRIVIAS_DATOS LLAVESC COMA LISTA_TRIVIAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_TRIVIAS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FORMS ::= CABECERA MENOR EXCLA RESO DOSPTS COMID NUVTRI COMID MAYOR LLAVESA COMID PARATRIV COMID DOSPTS CORCHEA LISTA_TRIVIAS CORCHEC LLAVESC FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MOD_FORMS ::= CABECERA MENOR EXCLA RESO DOSPTS COMID MODITRIV COMID MAYOR LLAVESA COMID PARATRIV COMID DOSPTS CORCHEA LISTA_TRIVIAS CORCHEC LLAVESC FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOD_FORMS",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DELETRIV ::= CABECERA MENOR EXCLA RESO DOSPTS COMID ELITRIV COMID MAYOR LLAVESA COMID PARATRIV COMID DOSPTS CORCHEA LLAVESA COMID IDTRIV COMID DOSPTS COMID IDE COMID LLAVESC CORCHEC LLAVESC FIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DELETRIV",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-26)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AGRE_COMP ::= COMID IDE COMID DOSPTS COMID ID COMID COMA COMID TRIVIA COMID DOSPTS COMID ID COMID COMA COMID RESPUESTA COMID DOSPTS COMID VALOR COMID COMA COMID CLASE COMID DOSPTS COMID VALOR COMID COMA COMID TEXTO COMID DOSPTS COMID VALOR COMID COMA COMID OPCIONES COMID DOSPTS COMID VALOR COMID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-41)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-41)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-41)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-33)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-33)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-33)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGRE_COMP",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-46)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_AGRE_COMP ::= LLAVESA AGRE_COMP LLAVESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_AGRE_COMP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA_AGRE_COMP ::= LLAVESA AGRE_COMP LLAVESC COMA LISTA_AGRE_COMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_AGRE_COMP",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FORMS_AGRE ::= CABECERA MENOR EXCLA RESO DOSPTS COMID AGRETRIV COMID MAYOR LLAVESA COMID PARACOMP COMID DOSPTS CORCHEA LISTA_AGRE_COMP CORCHEC LLAVESC FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMS_AGRE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MOD_COMP ::= COMID IDE COMID DOSPTS COMID ID COMID COMA COMID TRIVIA COMID DOSPTS COMID ID COMID COMA COMID CLASE COMID DOSPTS COMID VALOR COMID COMA COMID INDICE COMID DOSPTS COMID VALOR COMID COMA COMID TEXTO COMID DOSPTS COMID VALOR COMID COMA COMID OPCIONES COMID DOSPTS COMID VALOR COMID COMA COMID RESPUESTA COMID DOSPTS COMID VALOR COMID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-49)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-49)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-49)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-41)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-41)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-41)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-33)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-33)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-33)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int Gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String G = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MOD_COMP",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-54)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LISTA_MOD_COMP ::= LLAVESA MOD_COMP LLAVESC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_MOD_COMP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTA_MOD_COMP ::= LLAVESA MOD_COMP LLAVESC COMA LISTA_MOD_COMP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_MOD_COMP",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FORMS_MOD ::= CABECERA MENOR EXCLA RESO DOSPTS COMID MODICOMP COMID MAYOR LLAVESA COMID PARACOMP COMID DOSPTS CORCHEA LISTA_MOD_COMP CORCHEC LLAVESC FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMS_MOD",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-18)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DELECOMP ::= CABECERA MENOR EXCLA RESO DOSPTS COMID ELICOMP COMID MAYOR LLAVESA COMID PARACOMP COMID DOSPTS CORCHEA LLAVESA COMID ID COMID DOSPTS COMID IDE COMID COMA COMID TRIVIA COMID DOSPTS COMID IDE COMID LLAVESC CORCHEC LLAVESC FIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DELECOMP",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-34)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
